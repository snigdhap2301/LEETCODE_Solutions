/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int lenA = 0 ;
        int lenB = 0 ;
        ListNode cursorA = headA ;
        ListNode cursorB = headB;
        
        //lengths of both lists
        while (cursorA != null) {
            lenA++;
            cursorA = cursorA.next;
        }
        while (cursorB != null) {
            lenB++;
            cursorB = cursorB.next;
        }
        
        cursorA = headA;
        cursorB = headB;
        if (lenA > lenB) {
            int diff = lenA - lenB;
            for (int i = 0; i < diff; i++) {
                cursorA = cursorA.next;
            }
        } else {
            int diff = lenB - lenA;
            for (int i = 0; i < diff; i++) {
                cursorB = cursorB.next;
            }
        }
        
        //for finding a common node 
        while (cursorA != null && cursorB != null) {
            if (cursorA == cursorB) {
                return cursorA;
            }
            cursorA = cursorA.next;
            cursorB = cursorB.next;
        }
        
        // Not found
        return null;
    }
}
