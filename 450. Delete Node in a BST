# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def deleteNode(self, root, key):
        """
        :type root: Optional[TreeNode]
        :type key: int
        :rtype: Optional[TreeNode]
        """
        def deleteNode(root, key):
            if not root:
                return None

            if root.val > key:
                root.left = deleteNode(root.left, key)
            elif root.val < key:
                root.right = deleteNode(root.right, key)
            else:
                if not (root.left and root.right):
                    return root.left or root.right

                # Find the in-order successor (smallest node in the right subtree)
                successor = findSuccessor(root.right)
                root.val = successor.val
                root.right = deleteNode(root.right, successor.val)

            return root

        def findSuccessor(node):
            while node.left:
                node = node.left
            return node
        
        return deleteNode(root, key)
