class Solution(object):
    def findCircleNum(self, isConnected):
        """
        :type isConnected: List[List[int]]
        :rtype: int
        """
        n = len(isConnected)
	roots = list(range(n))
	sizes = [1] * n

	def find_parent(a):
		if roots[a] != a:
			roots[a] = find_parent(roots[a])
		return roots[a]

	def union(a, b):
		ra = find_parent(a)
		rb = find_parent(b)

		if ra == rb: return
		rbig, rsmall = (ra, rb) if sizes[ra] > sizes[rb] else (rb, ra)

		roots[rsmall] = rbig
		sizes[rbig] += sizes[rsmall]

	for i in range(n):
		for j in range(i+1, n):
			if isConnected[i][j]:
				union(i, j)

	return len(set(find_parent(i) for i in range(n)))
