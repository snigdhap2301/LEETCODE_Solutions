class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }

        int m = matrix.length;
        int n = matrix[0].length;
        int maxSide = 0;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == '1') {
                    int side = 1;
                    boolean validSquare = true;

                    // Check the diagonal cells for a square with side > 1
                    while (i + side < m && j + side < n && validSquare) {
                        for (int k = 0; k <= side; k++) {
                            if (matrix[i + k][j + side] == '0' || matrix[i + side][j + k] == '0') {
                                validSquare = false;
                                break;
                            }
                        }
                        if (validSquare) {
                            side++;
                        }
                    }

                    maxSide = Math.max(maxSide, side);
                }
            }
        }

        int maxSquareArea = maxSide * maxSide;
        return maxSquareArea;
    }
}
   
